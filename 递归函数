1.递归与递推：用递归来解决具有递推性质的问题
切饼：
数学公式：
q(n)=q(n-1)+n;
q(0)=1;

递推公式：考察从q(0)得出q(n)，从简单的情况开始，用循环解决
int n=0,count=1;
cin>>n;
for(int i=0;i<n;++i)
      count+=i;
cout<<"the result is"<<count<<endl;

递归函数：转换视角，看q(n)与(n-1)的关系，q(n)=q(n-1)+n，表现了递推关系，还要知道边界情况q(0)=1，问题的信息就完备了
int q(int n){
    if(n==0)
        return 1;
    else
        return (n+q(n-1));
}

斐波那契数列：1,2,3,4,5,8,13,21,34,55,89,144……用递归求解第n的数字
fab(n)=fab(n-1)+fab(n-2);
fab(1)=1;
fab(2)=1;

int fab(n){
    if(n==1||n==2)
        return 1;
    else
        return (fab(n-1)+fab(n-2));

函数地位平等，递归就是普通嵌套调用，不过是在函数体里面嵌套调用自己，每次调用新的函数都会开辟新的内存空间。递归指的是函数，递推说的是循环
不同：递推的关注点放在起始点条件i=0>n 递归的关注点放在求解目标上i=n。看待问题的视角不同
相同：重在表现第i次和i+1次执行的关系
递归的优势：函数让程序变得简明
方法总结：把关注点放在要求解的目标上i=n；找到第n次执行和n-1次执行之间的关系；确定第1次的返回结果

2.递归模拟连续发生的动作，用函数来描述重复过程
进制转换
void convert(int x){
  if(x/2){
      convert(x/2);
      cout<<x%2;
   }
   else
       cout<<x;
}

汉诺塔问题
学会了移动一个盘子 移动二个盘子的策略，所有问题都可以化简为2个盘子的情况,2个盘子的情况可解
move(3,A,B,C) 3个在A上的盘子 经过B 移动到C柱上：
move(2,A,C,B)
move 3 from A to C
move(2,B,A,C)
移动3个盘子的问题简化为移动2次移动2个盘子的问题，移动n个盘子简化为移动n-1个盘子的情况，直到2个
要实现move(n,A,B,C):
move(n-1,A,C,B)
move from A to C
move(n-1,B,A,C)

void move(int m,charx,char y,char z)//将m个盘子从A经过B移动到C
{
  if(m==1)
    cout<<"一个盘子"<<x<<"移动到"<<z<<endl;
  else
  {
  move(m-1,x,z,y);
  cout<<“把一个盘子从”<<x<<“移动到”<<z<<endl;
  move(m-1,y,x,z);
  }
}

move(n,'A','B','C');  //n个盘子从A经过B到C；

利用递归模拟连续发生的动作：
方法：
搞清楚连续发生的动作是什么；（不断/2得余取商，不断经过?移动到?）    搞清楚第一点定义函数
搞清楚不同次动作之间的关系：（把上一次商当做下一次被除数）          搞清楚第二点定义函数之间的关系
搞清楚边界条件是什么                                             搞清楚第三点描述递归退出的边界条件

3.利用递归进行“自动分析”  递归函数具有分析能力

放苹果：M个苹果放到N个盘子，多种分法？
1.假设存在函数f(m,n)告诉答案
2.n盘子>m苹果 if(n>m) f(m,n)=f(m,m);
苹果大于盘子n<=m=有盘子空着+没有盘子空着  

方法：先假设，有一个函数能给出答案 notation()  count(int m,int n)
在利用这个函数的前提下，分析如何解决问题
搞清楚最简单的情况下 答案是什么


3种场景没有明确界限，方法相通
